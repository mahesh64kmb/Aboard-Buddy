{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(route) {\n    this.route = route;\n  }\n  canActivate(route, state) {\n    return this.isAuthorized();\n  }\n  canActivateChild(childRoute, state) {\n    return this.isAuthorized();\n  }\n  isAuthorized() {\n    let token = localStorage.getItem('userId');\n    if (token) {\n      return true;\n    } else {\n      let url = '/auth/login';\n      this.route.navigateByUrl(url, {\n        replaceUrl: true\n      });\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,KAAa;IAAb,UAAK,GAALA,KAAK;EAAY;EACrCC,WAAW,CACTD,KAA6B,EAC7BE,KAA0B;IAC1B,OAAO,IAAI,CAACC,YAAY,EAAE;EAC5B;EACAC,gBAAgB,CACdC,UAAkC,EAClCH,KAA0B;IAC1B,OAAO,IAAI,CAACC,YAAY,EAAE;EAC5B;EAEAA,YAAY;IACV,IAAIG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACxC,IAAGF,KAAK,EAAC;MACP,OAAO,IAAI;KACZ,MAAI;MACH,IAAIG,GAAG,GAAG,aAAa;MACvB,IAAI,CAACT,KAAK,CAACU,aAAa,CAACD,GAAG,EAAE;QAACE,UAAU,EAAE;MAAI,CAAC,CAAC;MACjD,OAAO,KAAK;;EAElB;;AAtBWb,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAc,SAATd,SAAS;EAAAe,YAFR;AAAM","names":["AuthGuard","constructor","route","canActivate","state","isAuthorized","canActivateChild","childRoute","token","localStorage","getItem","url","navigateByUrl","replaceUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\saisu\\Downloads\\abroadbuddy-main\\abroadbuddy-main\\src\\app\\core\\guard\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(private route: Router) { }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.isAuthorized();\n  }\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.isAuthorized();\n  }\n\n  isAuthorized() {\n    let token = localStorage.getItem('userId');\n      if(token){\n        return true;        \n      }else{\n        let url = '/auth/login';\n        this.route.navigateByUrl(url, {replaceUrl: true})\n        return false;\n      }\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}