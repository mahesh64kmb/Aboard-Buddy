{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ChatComponent = class ChatComponent {\n  constructor(chatService, router, route) {\n    this.chatService = chatService;\n    this.router = router;\n    this.route = route;\n    this.userId = \"\";\n    this.selectedUserId = '';\n    this.requests = [];\n    this.contacts = [];\n    this.messages = [];\n    this.route.queryParams.subscribe(param => {\n      this.selectedUserId = param?.selectedUserId;\n    });\n  }\n  ngOnInit() {\n    this.userId = localStorage.getItem('userId');\n    this.getChatRequests();\n    this.getConnections();\n    if (this.selectedUserId) {\n      this.getMessages();\n    }\n  }\n  ngOnDestroy() {\n    clearInterval(this.messageInterval);\n  }\n  getChatRequests() {\n    let data = new FormData();\n    data.append('my_id', this.userId);\n    this.chatService.getRequests(data).subscribe(res => {\n      this.requests = res?.data ? res?.data : [];\n      // this.contacts = this.requests;\n    });\n  }\n\n  getConnections() {\n    let data = new FormData();\n    data.append('my_id', this.userId);\n    this.chatService.getContacts(data).subscribe(res => {\n      this.contacts = res?.data ? res?.data : [];\n    });\n  }\n  getMessages(clearMessageInterval = true) {\n    let data = new FormData();\n    data.append('from_id', this.userId);\n    data.append('to_id', this.selectedUserId);\n    // console.log(\"fromId=\"+this.userId+\", to_id=\"+this.selectedUserId);\n    this.chatService.getMessage(data).subscribe(res => {\n      if (clearMessageInterval) {\n        clearInterval(this.messageInterval);\n        this.setMessageInterval();\n      }\n      this.messages = res?.data ? res?.data : [];\n    });\n  }\n  setMessageInterval() {\n    this.messageInterval = setInterval(() => {\n      this.getMessages(false);\n    }, 2500);\n  }\n  messageIdentity(index, item) {\n    return item.id;\n  }\n  sendMessage() {\n    let data = new FormData();\n    data.append('from_id', this.userId);\n    data.append('to_id', this.selectedUserId);\n    data.append('message', this.messageText);\n    this.chatService.sendMessage(data).subscribe(res => {\n      this.messageText = \"\";\n      this.getMessages();\n    });\n  }\n  acceptRejectRequest(id, action) {\n    let data = new FormData();\n    data.append('id', id);\n    data.append('status', action);\n    this.chatService.acceptRejectRequest(data).subscribe(res => {\n      this.getChatRequests();\n    });\n  }\n  onChangeContact(contact) {\n    console.log('contact', contact);\n    this.selectedUserId = contact?.from_id == this.userId ? contact?.to_id : contact?.from_id;\n    if (this.selectedUserId) {\n      this.getMessages();\n    }\n  }\n};\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})], ChatComponent);\nexport { ChatComponent };","map":{"version":3,"mappings":"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","names":["Component","ChatComponent","constructor","chatService","router","route","queryParams","subscribe","param","selectedUserId","ngOnInit","userId","localStorage","getItem","getChatRequests","getConnections","getMessages","ngOnDestroy","clearInterval","messageInterval","data","FormData","append","getRequests","res","requests","getContacts","contacts","clearMessageInterval","getMessage","setMessageInterval","messages","setInterval","messageIdentity","index","item","id","sendMessage","messageText","acceptRejectRequest","action","onChangeContact","contact","console","log","from_id","to_id","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\saisu\\Desktop\\abroadbuddy-main\\abroadbuddy-main\\src\\app\\all-modules\\pages\\chating\\chat\\chat.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ChatService } from 'src/app/core/services';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent {\n  \n  userId:any=\"\";\n  selectedUserId:any ='';\n  requests:any=[];\n  contacts:any=[];\n  messages:any=[];\n  messageText:any;\n  messageInterval:any;\n  constructor(private chatService:ChatService, private router:Router, private route:ActivatedRoute,){\n    this.route.queryParams.subscribe(param=>{\n      this.selectedUserId = param?.selectedUserId;\n    })\n  }\n\n  ngOnInit(): void {\n    this.userId = localStorage.getItem('userId');\n    this.getChatRequests();\n    this.getConnections();\n    if(this.selectedUserId){\n      this.getMessages();\n    }\n  }\n\n  ngOnDestroy(){\n    clearInterval(this.messageInterval);\n  }\n  getChatRequests(){\n    let data = new FormData();\n    data.append('my_id', this.userId)\n    this.chatService.getRequests(data).subscribe((res:any)=>{\n      this.requests = res?.data?res?.data:[];\n      // this.contacts = this.requests;\n\n    })\n  }\n\n  getConnections(){\n    let data = new FormData();\n    data.append('my_id', this.userId)\n    this.chatService.getContacts(data).subscribe((res:any)=>{\n      this.contacts = res?.data?res?.data:[];\n    })\n  }\n\n\n  getMessages(clearMessageInterval:boolean=true){\n    let data = new FormData();\n    data.append('from_id', this.userId)\n    data.append('to_id', this.selectedUserId)\n    // console.log(\"fromId=\"+this.userId+\", to_id=\"+this.selectedUserId);\n   \n    this.chatService.getMessage(data).subscribe((res:any)=>{\n      if(clearMessageInterval){\n        clearInterval(this.messageInterval);\n        this.setMessageInterval();\n      }\n      this.messages = res?.data?res?.data:[];\n    })\n  }\n\n  setMessageInterval(){\n    this.messageInterval = setInterval(()=>{\n      this.getMessages(false);\n     }, 2500)\n\n  }\n\n\n  messageIdentity(index:any, item:any){\n    return item.id; \n }\n  sendMessage(){\n    let data = new FormData();\n    data.append('from_id', this.userId)\n    data.append('to_id', this.selectedUserId)\n    data.append('message', this.messageText)\n    this.chatService.sendMessage(data).subscribe((res:any)=>{\n      this.messageText = \"\";\n      this.getMessages();\n    })\n  }\n\n  acceptRejectRequest(id:any, action:string){\n    let data = new FormData();\n    data.append('id', id)\n    data.append('status', action)\n    this.chatService.acceptRejectRequest(data).subscribe((res:any)=>{\n      this.getChatRequests();\n    })\n  }\n  \n  onChangeContact(contact:any){\n    console.log('contact', contact)\n      this.selectedUserId = contact?.from_id==this.userId?contact?.to_id:contact?.from_id;\n      if(this.selectedUserId){\n        this.getMessages();\n      }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}