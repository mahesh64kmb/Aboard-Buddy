{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  // baseUrl = env.baseUrl;\n  constructor(http) {\n    this.http = http;\n  }\n  post(endpoint, req) {\n    let param = new HttpParams();\n    param = req;\n    return this.http.post(endpoint, param).pipe(\n    // retry(1),\n    catchError(this.errorHandl));\n  }\n  get(endpoint, req = {}) {\n    let param = new HttpParams();\n    param = req;\n    return this.http.get(endpoint, {\n      params: param\n    });\n  }\n  customGet(endpoint, req = {}) {\n    let param = new HttpParams();\n    param = req;\n    return this.http.get(endpoint, {\n      params: param,\n      responseType: 'text'\n    });\n  }\n  delete(endpoint, req = {}) {\n    // let param = new HttpParams();\n    let param = req;\n    return this.http.delete(endpoint, {\n      body: param\n    });\n  }\n  put(endpoint, req, headers) {\n    let param = new HttpParams();\n    param = req;\n    return this.http.put(endpoint, param, headers);\n  }\n  patch(endpoint, req) {\n    let param = new HttpParams();\n    param = req;\n    return this.http.patch(endpoint, param);\n  }\n  fetch(endpoint, req) {\n    let param = new HttpParams();\n    param = req;\n    return this.http.put(endpoint, param);\n  }\n  // Error handling\n  errorHandl(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = error;\n      if (error.status === 401) {\n        // localStorage.clear();\n      }\n    }\n    return throwError(errorMessage);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAkCA,UAAU,QAAQ,sBAAsB;AAC1E,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;AAKjC,OAAM,MAAOC,UAAU;EACrB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAiB;EACzCC,IAAI,CAACC,QAAgB,EAAEC,GAAQ;IAC7B,IAAIC,KAAK,GAAG,IAAIT,UAAU,EAAE;IAC5BS,KAAK,GAAGD,GAAG;IACX,OAAO,IAAI,CAACH,IAAI,CAACC,IAAI,CAACC,QAAQ,EAAEE,KAAK,CAAC,CAACC,IAAI;IACzC;IACAT,UAAU,CAAC,IAAI,CAACU,UAAU,CAAC,CAC5B;EACH;EAEAC,GAAG,CAACL,QAAgB,EAAEC,MAAS,EAAE;IAC/B,IAAIC,KAAK,GAAG,IAAIT,UAAU,EAAE;IAC5BS,KAAK,GAAGD,GAAG;IACX,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAACL,QAAQ,EAAE;MAACM,MAAM,EAACJ;IAAK,CAAC,CAAC;EAChD;EAEAK,SAAS,CAACP,QAAgB,EAAEC,MAAS,EAAE;IACrC,IAAIC,KAAK,GAAG,IAAIT,UAAU,EAAE;IAC5BS,KAAK,GAAGD,GAAG;IACX,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAACL,QAAQ,EAAE;MAACM,MAAM,EAACJ,KAAK;MAAEM,YAAY,EAAC;IAAM,CAAC,CAAC;EACrE;EAEAC,MAAM,CAACT,QAAgB,EAAEC,MAAQ,EAAE;IACjC;IACA,IAAIC,KAAK,GAAGD,GAAG;IACf,OAAO,IAAI,CAACH,IAAI,CAACW,MAAM,CAACT,QAAQ,EAAE;MAACU,IAAI,EAACR;IAAK,CAAC,CAAE;EAClD;EAEAS,GAAG,CAACX,QAAgB,EAAEC,GAAQ,EAAEW,OAAa;IAC3C,IAAIV,KAAK,GAAG,IAAIT,UAAU,EAAE;IAC5BS,KAAK,GAAGD,GAAG;IACX,OAAO,IAAI,CAACH,IAAI,CAACa,GAAG,CAACX,QAAQ,EAAEE,KAAK,EAAEU,OAAO,CAAC;EAChD;EAEAC,KAAK,CAACb,QAAgB,EAAEC,GAAQ;IAC9B,IAAIC,KAAK,GAAG,IAAIT,UAAU,EAAE;IAC5BS,KAAK,GAAGD,GAAG;IACX,OAAO,IAAI,CAACH,IAAI,CAACe,KAAK,CAACb,QAAQ,EAAEE,KAAK,CAAC;EACzC;EAEAY,KAAK,CAACd,QAAgB,EAAEC,GAAQ;IAC9B,IAAIC,KAAK,GAAG,IAAIT,UAAU,EAAE;IAC5BS,KAAK,GAAGD,GAAG;IACX,OAAO,IAAI,CAACH,IAAI,CAACa,GAAG,CAACX,QAAQ,EAAEE,KAAK,CAAC;EACvC;EAEA;EACAE,UAAU,CAACW,KAAU;IACnB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MAErC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MAEL;MACAF,YAAY,GAAGD,KAAK;MACpB,IAAIA,KAAK,CAACI,MAAM,KAAK,GAAG,EAAE;QACxB;MAAA;;IAGJ,OAAOxB,UAAU,CAACqB,YAAY,CAAC;EACjC;;AAjEWpB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAwB,SAAVxB,UAAU;EAAAyB,YAFT;AAAM","names":["HttpParams","catchError","throwError","ApiService","constructor","http","post","endpoint","req","param","pipe","errorHandl","get","params","customGet","responseType","delete","body","put","headers","patch","fetch","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\saisu\\Desktop\\abroadbuddy-main\\abroadbuddy-main\\src\\app\\shared\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  // baseUrl = env.baseUrl;\r\n\r\n  constructor(private http: HttpClient,) { }\r\n  post(endpoint: string, req: any) {\r\n    let param = new HttpParams();\r\n    param = req;\r\n    return this.http.post(endpoint, param).pipe(\r\n      // retry(1),\r\n      catchError(this.errorHandl)\r\n    );\r\n  }\r\n\r\n  get(endpoint: string, req:any ={}) {\r\n    let param = new HttpParams();\r\n    param = req;\r\n    return this.http.get(endpoint, {params:param});\r\n  }\r\n\r\n  customGet(endpoint: string, req:any ={}) {\r\n    let param = new HttpParams();\r\n    param = req;\r\n    return this.http.get(endpoint, {params:param, responseType:'text'});\r\n  }\r\n\r\n  delete(endpoint: string, req:any={}) {\r\n    // let param = new HttpParams();\r\n    let param = req;\r\n    return this.http.delete(endpoint, {body:param} );\r\n  }\r\n\r\n  put(endpoint: string, req: any, headers?: any) {\r\n    let param = new HttpParams();\r\n    param = req;\r\n    return this.http.put(endpoint, param, headers)\r\n  }\r\n\r\n  patch(endpoint: string, req: any) {\r\n    let param = new HttpParams();\r\n    param = req;\r\n    return this.http.patch(endpoint, param)\r\n  }\r\n\r\n  fetch(endpoint: string, req: any) {\r\n    let param = new HttpParams();\r\n    param = req;\r\n    return this.http.put(endpoint, param)\r\n  }\r\n\r\n  // Error handling\r\n  errorHandl(error: any) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n\r\n      // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n\r\n      // Get server-side error\r\n      errorMessage = error;\r\n      if (error.status === 401) {\r\n        // localStorage.clear();\r\n      }\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}